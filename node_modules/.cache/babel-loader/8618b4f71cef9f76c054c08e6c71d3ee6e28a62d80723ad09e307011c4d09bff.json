{"ast":null,"code":"var _jsxFileName = \"/Users/chaitanya/repos/memory-card/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from './components/Card';\nimport { useState } from 'react';\nimport uniqid from 'uniqid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([{\n    name: \"Ant\",\n    id: uniqid()\n  }, {\n    name: \"Bat\",\n    id: uniqid()\n  }, {\n    name: \"Cat\",\n    id: uniqid()\n  }, {\n    name: \"Dog\",\n    id: uniqid()\n  }, {\n    name: \"Elephant\",\n    id: uniqid()\n  }, {\n    name: \"Frog\",\n    id: uniqid()\n  }, {\n    name: \"Goat\",\n    id: uniqid()\n  }]);\n  const [clickedCards, setClickedCards] = useState([]);\n  const handleClick = name => {\n    const cardsCopy = cards.slice();\n    const shuffledCards = [];\n    for (let i = 0; i < cards.length; i++) {\n      console.log(cardsCopy.length);\n      let index = Math.floor(Math.random() * (cardsCopy.length - 1));\n      console.log(index);\n      shuffledCards[i] = cardsCopy[index];\n      cardsCopy.splice(index, 1);\n      console.log(cardsCopy.toString());\n    }\n    console.log(shuffledCards.toString());\n    setCards(shuffledCards);\n    //setClickedCards(...clickedCards, name);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"App\",\n    children: cards.map(card => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          handleClick: handleClick,\n          name: card.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 34\n        }, this)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CtTrklujO90fGDl1VUlkwRSNBdc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","Card","useState","uniqid","App","cards","setCards","name","id","clickedCards","setClickedCards","handleClick","cardsCopy","slice","shuffledCards","i","length","console","log","index","Math","floor","random","splice","toString","map","card"],"sources":["/Users/chaitanya/repos/memory-card/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Card from './components/Card';\nimport { useState } from 'react';\nimport uniqid from 'uniqid';\n\nfunction App() {\n  const [cards, setCards] = useState( [\n      { name: \"Ant\", id: uniqid() },\n      { name: \"Bat\", id: uniqid() },\n      { name: \"Cat\", id: uniqid() },\n      { name: \"Dog\", id: uniqid() },\n      { name: \"Elephant\", id: uniqid() },\n      { name: \"Frog\", id: uniqid() },\n      { name: \"Goat\", id: uniqid() }, \n    ] \n  );\n  const [clickedCards, setClickedCards] = useState([]);\n  const handleClick = (name) => {\n    const cardsCopy = cards.slice();\n    const shuffledCards = [];\n    for (let i = 0; i < cards.length; i++) {\n      console.log(cardsCopy.length);\n      let index = Math.floor(Math.random()*(cardsCopy.length - 1));\n      console.log(index);\n      shuffledCards[i] = cardsCopy[index];\n      cardsCopy.splice(index, 1);\n      console.log(cardsCopy.toString());\n    }\n    console.log(shuffledCards.toString());\n    setCards(shuffledCards);\n    //setClickedCards(...clickedCards, name);\n  }\n  return (\n    <ul className=\"App\">\n      {cards.map(card => {\n        return <li key={card.id}><Card handleClick={handleClick} name={card.name}/></li>\n      })}\n    </ul>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,OAAOC,IAAI,MAAM,mBAAmB;AACpC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,QAAQ;AAAC;AAE5B,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAE,CAChC;IAAEK,IAAI,EAAE,KAAK;IAAEC,EAAE,EAAEL,MAAM;EAAG,CAAC,EAC7B;IAAEI,IAAI,EAAE,KAAK;IAAEC,EAAE,EAAEL,MAAM;EAAG,CAAC,EAC7B;IAAEI,IAAI,EAAE,KAAK;IAAEC,EAAE,EAAEL,MAAM;EAAG,CAAC,EAC7B;IAAEI,IAAI,EAAE,KAAK;IAAEC,EAAE,EAAEL,MAAM;EAAG,CAAC,EAC7B;IAAEI,IAAI,EAAE,UAAU;IAAEC,EAAE,EAAEL,MAAM;EAAG,CAAC,EAClC;IAAEI,IAAI,EAAE,MAAM;IAAEC,EAAE,EAAEL,MAAM;EAAG,CAAC,EAC9B;IAAEI,IAAI,EAAE,MAAM;IAAEC,EAAE,EAAEL,MAAM;EAAG,CAAC,CAC/B,CACF;EACD,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMS,WAAW,GAAIJ,IAAI,IAAK;IAC5B,MAAMK,SAAS,GAAGP,KAAK,CAACQ,KAAK,EAAE;IAC/B,MAAMC,aAAa,GAAG,EAAE;IACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,KAAK,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;MACrCE,OAAO,CAACC,GAAG,CAACN,SAAS,CAACI,MAAM,CAAC;MAC7B,IAAIG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAEV,SAAS,CAACI,MAAM,GAAG,CAAC,CAAC,CAAC;MAC5DC,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;MAClBL,aAAa,CAACC,CAAC,CAAC,GAAGH,SAAS,CAACO,KAAK,CAAC;MACnCP,SAAS,CAACW,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;MAC1BF,OAAO,CAACC,GAAG,CAACN,SAAS,CAACY,QAAQ,EAAE,CAAC;IACnC;IACAP,OAAO,CAACC,GAAG,CAACJ,aAAa,CAACU,QAAQ,EAAE,CAAC;IACrClB,QAAQ,CAACQ,aAAa,CAAC;IACvB;EACF,CAAC;;EACD,oBACE;IAAI,SAAS,EAAC,KAAK;IAAA,UAChBT,KAAK,CAACoB,GAAG,CAACC,IAAI,IAAI;MACjB,oBAAO;QAAA,uBAAkB,QAAC,IAAI;UAAC,WAAW,EAAEf,WAAY;UAAC,IAAI,EAAEe,IAAI,CAACnB;QAAK;UAAA;UAAA;UAAA;QAAA;MAAE,GAA3DmB,IAAI,CAAClB,EAAE;QAAA;QAAA;QAAA;MAAA,QAAyD;IAClF,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QACC;AAET;AAAC,GAlCQJ,GAAG;AAAA,KAAHA,GAAG;AAoCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}